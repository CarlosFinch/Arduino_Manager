/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package arduino_manager;

import java.text.SimpleDateFormat;
import java.util.Calendar;

/**
 *
 * @author Sebastian
 */ 
public class JFrameMain extends javax.swing.JFrame {

    /**
     * Creates new form JFrameMain
     */
    public JFrameMain() {
        initComponents();
        Fill_CB1();
        
    }   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CB_PortMap = new javax.swing.JComboBox();
        B_OpenPort = new javax.swing.JButton();
        B_ClosePort = new javax.swing.JButton();
        B_RefreshPort = new javax.swing.JButton();
        B_LedON = new javax.swing.JButton();
        B_LedOFF = new javax.swing.JButton();
        TA_Commands = new java.awt.TextArea();
        CB_PortSpeed = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CB_PortMap.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CB_PortMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_PortMapActionPerformed(evt);
            }
        });

        B_OpenPort.setText("Open Port");
        B_OpenPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_OpenPortActionPerformed(evt);
            }
        });

        B_ClosePort.setText("Close Port");
        B_ClosePort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_ClosePortActionPerformed(evt);
            }
        });

        B_RefreshPort.setText("Refresh");
        B_RefreshPort.setToolTipText("");
        B_RefreshPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_RefreshPortActionPerformed(evt);
            }
        });

        B_LedON.setText("Led ON");
        B_LedON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_LedONActionPerformed(evt);
            }
        });

        B_LedOFF.setText("Led OFF");
        B_LedOFF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_LedOFFActionPerformed(evt);
            }
        });

        CB_PortSpeed.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "75", "110", "300", "1200", "2400", "4800", "9600", "19200", "38400", "57600", "115200" }));
        CB_PortSpeed.setSelectedIndex(6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TA_Commands, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CB_PortMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(B_RefreshPort, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CB_PortSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(B_OpenPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(B_ClosePort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(B_LedON)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(B_LedOFF)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CB_PortMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(B_OpenPort)
                    .addComponent(B_ClosePort)
                    .addComponent(B_RefreshPort)
                    .addComponent(CB_PortSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(B_LedON)
                    .addComponent(B_LedOFF))
                .addGap(35, 35, 35)
                .addComponent(TA_Commands, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public static void writeResponse(String s) {          
        appendText(s);        
    }
    /**
     *adding text to textarea
     */
    public static void appendText(String command) {
        String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());	
        TA_Commands.append(timeStamp+"         "+command+"\n");
    }
    private void B_OpenPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_OpenPortActionPerformed
        RXTX rxtx = new RXTX();
        try {
            String chosenPortNumber = CB_PortMap.getSelectedItem().toString();
            String chosenPortSpeed = CB_PortSpeed.getSelectedItem().toString();
            String openport = rxtx.connect(chosenPortNumber, chosenPortSpeed);           
            appendText("Openning port ("+chosenPortNumber+","+chosenPortSpeed+")..."+openport);
        } catch (Exception ex) {
            appendText("Openning port...ERROR - "+ex.toString());            
        }
    }//GEN-LAST:event_B_OpenPortActionPerformed

    private void B_ClosePortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_ClosePortActionPerformed
        RXTX rxtx = new RXTX ();
        try {
            String closeport = rxtx.diconnect();
            appendText("Closing port..."+closeport);
        } catch (Exception ex) {
            appendText("Closing port...ERROR - "+ex.toString());            
        }
    }//GEN-LAST:event_B_ClosePortActionPerformed

    private void B_RefreshPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_RefreshPortActionPerformed
        Fill_CB1();
    }//GEN-LAST:event_B_RefreshPortActionPerformed

    private void B_LedONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_LedONActionPerformed
        try {
            RXTX.writeData("1");            
        } catch (Exception ex) {
            appendText("Sending ON...ERROR - "+ex.toString());            
        }
    }//GEN-LAST:event_B_LedONActionPerformed

    private void B_LedOFFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_LedOFFActionPerformed
        try {
            RXTX.writeData("0");            
        } catch (Exception ex) {
            appendText("Sending OFF...ERROR - "+ex.toString());            
        }
    }//GEN-LAST:event_B_LedOFFActionPerformed

    private void CB_PortMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_PortMapActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CB_PortMapActionPerformed
    private void Fill_CB1() {                                         
        CB_PortMap.removeAllItems();
        RXTX rxtx = new RXTX();
        if (rxtx.searchForPorts()!=null) {
            for (int i = 0; i < rxtx.searchForPorts().size(); i++) {
                CB_PortMap.addItem(rxtx.searchForPorts().get(i));	            
            }
        } else {
                CB_PortMap.addItem("none");	            
        }
    } 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameMain().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_ClosePort;
    private javax.swing.JButton B_LedOFF;
    private javax.swing.JButton B_LedON;
    private javax.swing.JButton B_OpenPort;
    private javax.swing.JButton B_RefreshPort;
    private javax.swing.JComboBox CB_PortMap;
    private javax.swing.JComboBox CB_PortSpeed;
    public static java.awt.TextArea TA_Commands;
    // End of variables declaration//GEN-END:variables
}
